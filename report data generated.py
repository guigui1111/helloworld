#!/usr/bin/python2.7
# coding=utf-8
# This code is generated by Junhui Wang, 06/01/2016
import pandas as pd
import numpy as np
import codecs
#change the working directory; open two source files and create the output file which is "my_tag.txt"
import os
os.chdir("C:/Users/Junhui/PycharmProjects/entropy")
f_out = codecs.open('my_report_data.txt', 'w',encoding='UTF-8')

df = pd.read_csv('yichang_td.csv', sep=',',encoding="gb18030")
df2 = pd.read_csv('yichang_br.csv',sep=',',encoding="gb18030")
f_out.write(u'报告所需数据如下'+"\n\n")
f_out.write(u'TD大数据库成功识别'+ str(len(df.index))+ u"例"+ "\n")
f_out.write(u'BR大数据库成功识别'+ str(len(df2.index))+ u"例"+ "\n\n")

def barplot_mul(columns,outname):
    LABELS = columns
    mydata = df[columns]
    tep = mydata.apply(pd.value_counts, axis=0)
    where_are_NaNs = np.isnan(tep)
    tep[where_are_NaNs] = 0
    #print tep.ix['Y']
    y= tep.ix['Y'].values/float(len(df.index))
    total = sum(y)
    for i in range(len(y)):
        y[i] = y[i] / total
    f_out.write(outname + ':'+ '\n')
    for i in range(len(y)):
        f_out.write(columns[i] + '\t')
        f_out.write("%.2f%%" % (y[i]*100) +"\n")
    f_out.write("\n")

def barplot_mul_no(columns,outname):
    LABELS = columns
    mydata = df[columns]
    tep = mydata.apply(pd.value_counts, axis=0)
    where_are_NaNs = np.isnan(tep)
    tep[where_are_NaNs] = 0
    #print tep.ix['Y']
    y= tep.ix['Y'].values/float(len(df.index))
    y, LABELS = (list(x) for x in zip(*sorted(zip(y, LABELS),reverse=True)))
    f_out.write(outname + ':'+ '\n')
    for i in range(len(y)):
        f_out.write(columns[i] + '\t')
        f_out.write("%.2f%%" % (y[i]*100) +"\n")
    f_out.write("\n")

def barplot_one(column,drop=[]):
    y = []
    classification = df[column].value_counts()
    total = len(df.index) - classification['N']
    classification = classification.drop(['N'])
    classification = classification.drop(drop)
    y = classification[0:10].values / float(total)
    LABELS = classification[0:10].index
    f_out.write(column + ':'+'\n')
    for i in range(len(y)):
        f_out.write(LABELS[i] + '\t')
        f_out.write("%.2f%%" % (y[i] * 100) + "\n")
    f_out.write("\n")


def barplot2_one(column):
    classification = df2[column].value_counts()
    v1 = np.nansum(classification[["[0,500)","[500,1000)","[1000,1500)","[1500,2000)","[2000,2500)","[2500,3000)","[3000,3500)",
                              "[3500,4000)","[4000,4500)","[4500,5000)"]])
    v2 = np.nansum(classification[["[5000,5500)", "[5500,6000)", "[6000,6500)", "[6500,7000)", "[7000,7500)", "[7500,8000)", "[8000,8500)",
                        "[8500,9000)", "[9000,9500)", "[9500,10000)"]])
    v3 = np.nansum(classification[["[10000,15000)", "[15000,20000)", "[20000,25000)", "[25000,30000)", "[30000,35000)", "[35000,40000)",
                             "[40000,45000)","[45000,50000)"]])
    v4 = np.nansum(classification[["[50000,55000)", "[55000,60000)","[60000,65000)","[65000,70000)","[70000,75000)","[75000,80000)",
                             "[80000,85000)","[85000,90000)", "[90000,95000)", "[95000,100000)"]])
    v5 = np.nansum(classification[["[100000,200000)"]])
    v6 = np.nansum(classification[["[200000,300000)", "[300000,400000)", "[400000,500000)"]])
    v7 = np.nansum(classification)-v1-v2-v3-v4-v5-v6
    balance = pd.Series([v1,v2,v3,v4,v5,v6,v7],index=['[0,5k)','[5k,10k)','[10k,50k)','[50k,100k)','[100k,200k)','[200k,500k)',u'500k以上'])
    y = balance.values / float(sum(balance.values))
    LABELS = balance.index
    f_out.write(column + ':' + '\n')
    for i in range(len(y)):
        f_out.write(LABELS[i] + '\t')
        f_out.write("%.2f%%" % (y[i] * 100) + "\n")
    f_out.write("\n")

def barplot2_mul_no(columns,outname):
    LABELS = columns
    mydata = df2[columns]
    def freq_count(series):
        series = series[series > 0]
        return (len(series))
    tep = mydata.apply(freq_count)
    y = tep.values / float(len(df2.index))
    y, LABELS = (list(x) for x in zip(*sorted(zip(y, LABELS),reverse=True)))
    f_out.write(outname + ':'+ '\n')
    for i in range(len(y)):
        f_out.write(LABELS[i] + '\t')
        f_out.write("%.2f%%" % (y[i]*100) +"\n")
    f_out.write("\n")

def count_mul(columns,outname):
    LABELS = columns
    mydata = df2[columns]
    def freq_count(series):
        series = series[series > 0]
        return (len(series))
    tep = mydata.apply(freq_count)
    y = tep.values / float(len(df2.index))
    y, LABELS = (list(x) for x in zip(*sorted(zip(y, LABELS),reverse=True)))
    f_out.write(outname + ':'+ '\n')
    for i in range(len(y)):
        f_out.write(LABELS[i] + '\t')
        f_out.write("%.2f%%" % (y[i]*100) +"\n")
    f_out.write("\n")

sex = [u'男', u'女']
barplot_mul(columns=sex,outname=u'性别')

age = [u'19岁以下', u'19-25岁', u'26-35岁', u'36-45岁', u'46-55岁', u'55岁以上']
barplot_mul(columns=age, outname=u'年龄')

marriage = [u'已婚', u'未婚']
barplot_mul(columns=marriage,outname=u'婚姻状况')

car = [u'有车', u'无车']
barplot_mul(columns=car,outname=u'车')

brand = u'品牌'
phone_type= u'机型'
barplot_one(column=brand,drop=u'苹果')
barplot_one(column=phone_type)
#drop= ['iPhone 6','iPhone 5S','iPhone 6 plus','iPhone 6s','iPhone 5','iPhone 4s']

live_place = u'常驻城市'
classification = df[live_place].value_counts()
total = len(df.index) - classification['N']
classification = classification.drop(['N'])
a =  pd.Series(classification.index)
c=a.apply(lambda x: pd.Series(x.split(',')))
b = pd.Series(classification.values)
c['3'] = b
c.columns = ['a','b','c','d']
d1 = c[['a','d']]
d2 = c[['b','d']]
d2.columns=['a','d']
w = d1.append(d2, ignore_index=True)
d3 = c[['c','d']]
d3.columns=['a','d']
w = w.append(d3, ignore_index=True)
#d = c.join(b)
#c = pd.concat([a, b], axis=1)
#c.columns = ['a','b']
#d = pd.DataFrame(c.a.str.split(',',1).tolist(),columns=["a","b"])
#v = w.groupby('a').sum().sort('d',ascending=False)
v = w.groupby('a').sum().sort_values(by='d',ascending=False)
rsl = v.add_suffix('_Count').reset_index()
y = rsl['d_Count'][0:5] / float(total)
LABELS = rsl['a'][0:5]
f_out.write(live_place + ':'+'\n')
for i in range(len(y)):
    f_out.write(LABELS[i] + '\t')
    f_out.write("%.2f%%" % (y[i] * 100) + "\n")
f_out.write("\n")

interest = [u'家庭', u'网购', u'教育', u'阅读', u'资讯', u'社交', u'通讯', u'影音', u'商旅出行', u'家居',
            u'健康', u'生活', u'工作', u'手机工具', u'金融理财', u'房产', u'母婴', u'娱乐', u'汽车', u'个护美容']
barplot_mul_no(columns=interest, outname=u'移动应用偏好')

finance = [u'财富管理', u'货币基金', u'直销银行', u'直销保险', u'证券', u'期货', u'外汇', u'贵金属',
           u'众筹融资', u'彩票', u'支付', u'借贷', u'手机银行', u'保险']
barplot_mul_no(columns=finance, outname=u'移动理财偏好')

news = [u'科技资讯', u'新闻资讯', u'游戏攻略', u'财经资讯', u'娱乐资讯', u'体育资讯', u'学术资讯']
barplot_mul_no(columns=news, outname=u'移动资讯偏好')

house = [u'房屋咨询', u'买房', u'卖房', u'租房']
barplot_mul_no(columns=house, outname=u'移动房产偏好')


##sometimes it is "母婴/育儿", sometimes it is 母婴.育儿
media= [u'近3个月动漫信息总浏览天数',u'近3个月汽车信息总浏览天数',u'近3个月历史信息总浏览天数',u'近3个月视频信息总浏览天数',
        u'近3个月IT信息总浏览天数',u'近3个月女性时尚信息总浏览天数',u'近3个月彩票信息总浏览天数',u'近3个月母婴/育儿信息总浏览天数',
        u'近3个月其它信息总浏览天数',u'近3个月交友信息总浏览天数',u'近3个月游戏信息总浏览天数',u'近3个月知识问答信息总浏览天数',
        u'近3个月户外信息总浏览天数',u'近3个月数码信息总浏览天数',u'近3个月房产信息总浏览天数',u'近3个月新闻信息总浏览天数',
        u'近3个月招聘信息总浏览天数',u'近3个月音乐信息总浏览天数',u'近3个月影视信息总浏览天数',u'近3个月社区信息总浏览天数',
        u'近3个月财经信息总浏览天数',u'近3个月教育信息总浏览天数',u'近3个月应用信息总浏览天数',u'近3个月文学艺术信息总浏览天数',
        u'近3个月旅游信息总浏览天数',u'近3个月军事信息总浏览天数',u'近3个月手机信息总浏览天数',u'近3个月美食信息总浏览天数',
        u'近3个月邮箱信息总浏览天数',u'近3个月健康信息总浏览天数',u'近3个月支付信息总浏览天数',u'近3个月体育信息总浏览天数',
        u'近3个月生活信息总浏览天数',u'近3个月娱乐信息总浏览天数']
barplot2_mul_no(columns=media, outname=u'媒体浏览偏好')

merchandise = [u'近3个月网游虚拟物品总消费次数', u'近3个月本地生活类商品总消费次数', u'近3个月教育培训类商品总消费次数', u'近3个月手机及配件类商品总消费次数',
         u'近3个月数码类商品总消费次数', u'近3个月运动户外类商品总消费次数', u'近3个月汽车用品类商品总消费次数', u'近3个月日用百货类商品总消费次数',
         u'近3个月房产类商品总消费次数', u'近3个月保险理财类商品总消费次数', u'近3个月医疗保健类商品总消费次数', u'近3个月电脑办公类商品总消费次数',
         u'近3个月收藏类商品总消费次数', u'近3个月美食特产类商品总消费次数', u'近3个月家用电器类商品总消费次数', u'近3个月箱包类商品总消费次数',
         u'近3个月文化娱乐类商品总消费次数', u'近3个月其它类商品总消费次数', u'近3个月通讯类商品总消费次数', u'近3个月家居家纺类商品总消费次数',
         u'近3个月母婴用品类商品总消费次数', u'近3个月钟表首饰类商品总消费次数', u'近3个月家具建材类商品总消费次数', u'近3个月服装配饰类商品总消费次数',
         u'近3个月鞋类商品总消费次数', u'近3个月宠物生活类商品总消费次数', u'近3个月个护化妆类商品总消费次数', u'近3个月出差旅游类商品总消费次数',
         u'近3个月珠宝贵金属类商品总消费次数']
barplot2_mul_no(columns=merchandise, outname=u'商品消费偏好')

brand = [u'排名第1的最关注的品牌', u'排名第2的最关注的品牌', u'排名第3的最关注的品牌', u'排名第4的最关注的品牌',u'排名第5的最关注的品牌']
tep = df2[brand]
tep2 = tep[u'排名第1的最关注的品牌'].append(tep[u'排名第2的最关注的品牌']).reset_index(drop=True)
tep2 = tep2.append(tep[u'排名第3的最关注的品牌']).reset_index(drop=True)
tep2 = tep2.append(tep[u'排名第4的最关注的品牌']).reset_index(drop=True)
tep2 = tep2.append(tep[u'排名第5的最关注的品牌']).reset_index(drop=True)
tep2 = pd.Series(tep2)
brand_rank = tep2.value_counts()
f_out.write(u"Top20品牌" +':'+'\n')
for i in range(20):
    f_out.write(brand_rank.index[i]+'\t')
f_out.write('\n\n')

d_1_income = u'储蓄卡过去第1个月收入金额'
barplot2_one(d_1_income)

d_1_outcome = u'储蓄卡过去第1个月支出金额'
barplot2_one(d_1_outcome)

c_1_outcome = u'信用卡过去第1个月支出金额'
barplot2_one(c_1_outcome)

c_1_income = u'信用卡过去第1个月收入金额'
barplot2_one(c_1_income)

activity_place=[u'高端场所',u'交通枢纽',u'科教文化',u'旅游景区',u'医院']
#barplot_mul_no(columns=activity_place,outname=u'常去场所')

cost = [u'珠宝手表', u'服饰鞋帽', u'家居厨具', u'运动健康', u'箱包', u'母婴用品', u'数码', u'文化教育',
        u'化妆品', u'餐饮', u'家用电器', u'休闲娱乐', u'生活服务', u'零售卖场', u'汽车服务', u'房产置业',
        u'医疗', u'结婚', u'丽人', u'金融', u'亲子', u'培训机构', u'学校', u'公司企业']
#barplot_mul(columns=cost, outname=u'消费品类')





